node <<'EOF'
const axios = require('axios');
const fs = require('fs');
const AWS = require('aws-sdk');

if (!process.env.SECRET) {
    throw new Error("‚ùå SECRET environment variable is not set.");
}

const { apiKey, agentId, accessKeyId, secretAccessKey } = JSON.parse(process.env.SECRET);
const bucketName = process.env.BUCKET_NAME;

async function run() {
    try {
        console.log("üöÄ Launching PhantomBuster agent...");
        const launchRes = await axios.post(
            'https://api.phantombuster.com/api/v2/agents/launch',
            { id: agentId },
            { headers: { 'X-Phantombuster-Key-1': apiKey } }
        );

        if (!launchRes.data || !launchRes.data.containerId) {
            throw new Error("‚ùå Failed to launch PhantomBuster agent. Response: " + JSON.stringify(launchRes.data));
        }

        const containerId = launchRes.data.containerId;
        console.log("üöÄ Launched agent with container ID:", containerId);

        // Wait before fetching output
        await new Promise(r => setTimeout(r, 30000)); // Increased timeout

        console.log("üì¶ Fetching output...");
        const resultRes = await axios.get(
            `https://api.phantombuster.com/api/v2/containers/fetch-output?id=${containerId}`,
            { headers: { 'X-Phantombuster-Key-1': apiKey } }
        );

        const output = JSON.stringify(resultRes.data, null, 2);
        fs.writeFileSync("phantom_output.json", output);
        console.log("‚úÖ Output saved locally: phantom_output.json");

        console.log("‚òÅÔ∏è Uploading to S3...");
        const s3 = new AWS.S3({
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: 'us-east-1'
        });

        await s3.upload({
            Bucket: bucketName,
            Key: `phantom-data/phantom_output_${Date.now()}.json`,
            Body: output,
            ContentType: "application/json"
        }).promise();

        console.log("‚úÖ Uploaded to S3");
    } catch (err) {
        console.error("‚ùå Error:", err.message);
        process.exit(1);
    }
}

run();
EOF
